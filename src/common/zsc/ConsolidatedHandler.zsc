//When we press the reload button, just consolidate all of our ammo
class ConsolidatedHandler : StaticEventHandler
{
    //Check for reload button press
    override bool InputProcess (InputEvent e)
    {
        if (Bindings.GetBinding(e.KeyScan) == "+reload" && consolidate_auto) //TODO: Use something more reliable here, maybe GetAllKeysForCommand instead
        {
            EventHandler.SendNetworkEvent("ConsolidateAmmo",1,1);

            //Swallow the event
            e = null;
            return true;
        }

        return false;
    }
    
    //Check for consolidate key
    override void NetworkProcess (ConsoleEvent e) 
    {
        if (gamestate == 7) //TITLEMAP
            return;

        if (e.Name == "ConsolidateAmmo")
        {
            bool respectClip = e.args[1] > 0;
            bool reload = e.args[0] > 0;

            Consolidate(ConsolidatedUtils.UseAmmoSlot2(),respectClip,!reload);
            
            if (reload && CanReload())
                ForceReload();
        }
    }

    private bool CanReload()
    {
        return players[consoleplayer].WeaponState & WF_WEAPONRELOADOK;
    }

    private void ForceReload()
    {
        let weap = players[consoleplayer].ReadyWeapon;
        let st = weap.ResolveState("Reload");

        if (st)
            players[consoleplayer].setpsprite(PSP_WEAPON,st);
    }
    
    private bool Consolidate(bool ammo2, bool respectClipSize = true, bool msg = false)
    {
        //Keep consolidating until we can't anymore
        bool consolidated;
        while (true)
        {
            if (DoConsolidate(ammo2,respectClipSize))
                consolidated = true;
            else
                break;
        }

        if (consolidated)
        {
            let msgString = Stringtable.Localize("$CONSOLIDATED_AMMO");

            if (consolidate_messages == 2 || (consolidate_messages == 1 && msg))
                ConsolidatedUtils.DisplayConsolidateMessage(msgString);
            ConsolidatedUtils.PlayConsolidateSound(players[consoleplayer].mo);
        }

        return consolidated;
    }

    private bool DoConsolidate(bool ammo2, bool respectClipSize = true)
    {
        let player = players[consoleplayer].mo;
        let weap = players[consoleplayer].ReadyWeapon;

        class<Ammo> reserveAmmoClass = ammo2? weap.AmmoType2 : weap.AmmoType1;
        class<Ammo> clipAmmoClass = ammo2? weap.AmmoType1 : weap.AmmoType2;

        //don't consolidate unless we have less than a clip in reserve
        int clipSize = 99999999;
        if (respectClipSize)
            clipSize = ConsolidatedUtils.GetMagazineSize(weap,ammo2);

        bool usesAmmo = weap.AmmoType1 != null && weap.AmmoType2 != null;
        
        if (!usesAmmo)
            return false;

        int currentAmmo = player.CountInv(clipAmmoClass.GetClassName());
        int reserveAmmo = player.CountInv(reserveAmmoClass.GetClassName());

        bool outOfAmmo = !player.CheckInventory(reserveAmmoClass,clipSize);
        bool full = currentAmmo >= clipSize;
        bool willBeFull = currentAmmo + reserveAmmo >= clipSize;

        if (outOfAmmo && !full && !willBeFull)
        {
            //Find any other weapon with the same ammo type
            for (int i = 0; i < 10;i++)
            {
                for (int j = 0;j < players[consoleplayer].weapons.SlotSize(i);j++)
                {
                    let wclass = players[consoleplayer].weapons.GetWeapon(i,j);
                    let slotweap = ConsolidatedUtils.GetWeaponFromInventory(player.FindInventory(wclass));

                    if (slotweap && slotweap != weap)
                    {
                        class<Ammo> reserveAmmoClass2 = ammo2? slotweap.AmmoType2 : slotweap.AmmoType1;
                        class<Ammo> clipAmmoClass2 = ammo2? slotweap.AmmoType1 : slotweap.AmmoType2;

                        if (clipAmmoClass2 != null && reserveAmmoClass == reserveAmmoClass2)
                        {
                            //Console.Printf("Found a "..slotweap.getclassname().." with the same ammo type " .. reserveAmmoClass.GetClassName());

                            //Consolidate the ammo
                            //only consolidate enough to fill our mag
                            int consolidateAmount = clipSize - currentAmmo - reserveAmmo;

                            //console.printf("consolidate amount: %d (%d-%d)",consolidateAmount,clipSize,currentAmmo);

                            if (consolidateAmount > player.CountInv(clipAmmoClass2))
                                consolidateAmount = player.CountInv(clipAmmoClass2);

                            if (consolidateAmount > 0)
                            {
                                player.GiveInventory(reserveAmmoClass,consolidateAmount);
                                player.TakeInventory(clipAmmoClass2,consolidateAmount);
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
}
